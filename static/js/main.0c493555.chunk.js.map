{"version":3,"sources":["components/Header.js","components/Footer.js","components/PageNotFound.js","features/news/ArticleTitle.js","features/news/ArticleParagraph.js","features/news/ArticleAddress.js","utils/api/api.js","utils/constansts/constants.js","utils/secToString.js","features/news/Article.js","features/news/NewsItem.js","features/news/NewsList.js","features/news/ArticleLink.js","utils/decodeEntities.js","features/news/CommentItem.js","features/news/CommentsList.js","features/news/UpdateNewsButton.js","features/news/SingleNewsPage.js","features/news/newsSlice.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Header","to","activeClassName","Footer","href","target","rel","PageNotFound","ArticleTitle","isLoadingData","title","ArticleParagraph","children","text","ArticleAddress","api","options","this","_url","baseUrl","_headers","headers","res","ok","json","Promise","reject","status","id","fetch","method","then","_handleOriginalResponse","secToString","s","Date","toLocaleString","hour12","Article","React","useState","articleData","setArticleData","setIsLoadingData","useEffect","getItemById","data","err","console","log","finally","score","by","time","NewsItem","NewsList","newsItems","setNewsItems","markup","map","ArticleLink","url","entities","Entities","require","AllHtmlEntities","CommentItem","commentData","setCommentData","commentsListMarkup","setCommentsListMarkup","str","commentsItem","paddingTop","paddingBottom","deleted","style","kids","length","parse","decode","type","onClick","disabled","CommentsList","UpdateNewsButton","isLoading","SingleNewsPage","newsId","match","params","fetchData","useCallback","descendants","fetchNewsIds","createAsyncThunk","a","getNewStoriesIds","response","newsSlice","createSlice","name","initialState","newsIds","statusNewsIds","errorNewsIds","reducers","extraReducers","pending","state","action","fulfilled","payload","rejected","error","message","selectNewsIds","news","selectNewsIdsError","selectNewsIdsStatus","App","dispatch","useDispatch","useSelector","newsIdsStatus","newsIdsError","handleClickUpdateButton","updateIds","setTimeout","clearTimeout","className","exact","path","render","component","configureStore","reducer","newsReducer","Boolean","window","location","hostname","ReactDOM","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c493555.chunk.js","sourcesContent":["import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nexport const Header = () => {\n  return (\n    <header>\n      <h1>Hacker news app</h1>\n      <nav>\n        <ul>\n          <NavLink\n            to=\"/\"\n            activeClassName=\"\"\n          >\n            News List\n          </NavLink>\n        </ul>\n      </nav>\n    </header>\n  )\n}\n","import React from 'react';\n\nexport const Footer = () => {\n  return (\n    <footer>\n      <address>Author: Melnikov Aleksei</address>\n      <nav>\n          <h3>Contacts:</h3>\n          <ul>\n            <li>\n              <a\n                href=\"https://github.com/MelnikovAleksei\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                GitHub\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://www.facebook.com/meln.aleksei\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                Facebook\n              </a>\n            </li>\n          </ul>\n      </nav>\n    </footer>\n  )\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nexport const PageNotFound = () => {\n  return (\n    <main>\n      <h3>404 Page not found</h3>\n      <Link to=\"/\">Back to news list</Link>\n    </main>\n  )\n}\n","import React from 'react';\n\nexport const ArticleTitle = ({ isLoadingData, title }) => {\n  return (\n    <h3>\n      {isLoadingData ? 'Loading...' : title}\n    </h3>\n  )\n}\n","import React from 'react';\n\nexport const ArticleParagraph = ({ children, isLoadingData, text }) => {\n\n  return (\n    <p>\n      {isLoadingData ?\n        'Loading...'\n      :\n      text}\n      {children}\n    </p>\n  )\n}\n","import React from 'react';\n\nexport const ArticleAddress = ({ isLoadingData, text }) => {\n  return (\n    <address>\n      {isLoadingData ?\n        'Loading...'\n      :\n        text}\n    </address>\n  )\n}\n","import { NUMBER_OF_NEWS } from '../constansts/constants';\n\nclass Api {\n  constructor(options) {\n    this._url = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _handleOriginalResponse(res) {\n    if (!res.ok) {\n      return Promise.reject(`Error: ${res.status}`);\n    }\n    return res.json();\n  }\n\n  getItemById(id) {\n    return fetch(`${this._url}/v0/item/${id}.json`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleOriginalResponse)\n  }\n\n  getNewStoriesIds() {\n    return fetch(`${this._url}/v0/topstories.json?print=pretty&orderBy=\"$key\"&limitToFirst=${NUMBER_OF_NEWS}`, {\n      method: 'GET',\n      headers: this._headers\n    }).then(this._handleOriginalResponse)\n  }\n}\n\nexport const api = new Api({\n  baseUrl: 'https://hacker-news.firebaseio.com',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n","export const UPDATE_TIME = 60000;\nexport const NUMBER_OF_NEWS = 100;\n","export const secToString = (s) => {\n  const date = new Date(s * 1000);\n  const options = { hour12: false };\n  return date.toLocaleString('en-us', options);\n}\n","import React from 'react';\n\nimport { ArticleTitle } from './ArticleTitle';\nimport { ArticleParagraph } from './ArticleParagraph';\nimport { ArticleAddress } from './ArticleAddress';\n\nimport { Link } from 'react-router-dom';\n\nimport { api } from '../../utils/api/api';\n\nimport { secToString } from '../../utils/secToString';\n\nexport const Article = ({ children, id }) => {\n  const [articleData, setArticleData] = React.useState({});\n  const [isLoadingData, setIsLoadingData] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsLoadingData(true);\n    api.getItemById(id)\n      .then(\n        (data) => {\n          setArticleData(data);\n        },\n        (err) => {\n          console.log(err);\n        }\n      )\n      .finally(() => {\n        setIsLoadingData(false);\n      })\n  }, [id])\n\n  return (\n    <article>\n      <header>\n        <ArticleTitle\n          isLoadingData={isLoadingData}\n          title={articleData.title}\n        />\n      </header>\n      <ArticleParagraph\n        isLoadingData={isLoadingData}\n        text={`The story's score: ${articleData.score}`}\n      />\n      <footer>\n        <ArticleAddress\n          isLoadingData={isLoadingData}\n          text={`By: ${articleData.by}`}\n        />\n        <ArticleParagraph\n          isLoadingData={isLoadingData}\n          text=\"Date: \"\n        >\n          <time>{isLoadingData ? 'Loading...' : secToString(articleData.time)}</time>\n        </ArticleParagraph>\n        <Link to={`/news/${articleData.id}`}>Go to this news</Link>\n        {children}\n      </footer>\n    </article>\n  )\n}\n","import React from 'react';\n\nimport { Article } from './Article';\n\nexport const NewsItem = ({ id }) => {\n  return (\n    <li>\n      <Article id={id}/>\n    </li>\n  )\n}\n","import React from 'react';\n\nimport { NewsItem } from './NewsItem';\n\nexport const NewsList = ({ data }) => {\n  const [newsItems, setNewsItems] = React.useState(null);\n\n  React.useEffect(() => {\n    const markup = data.map(id => (\n      <NewsItem key={id} id={id}/>\n    ))\n    setNewsItems(markup);\n  }, [data])\n\n  return (\n    <ul>\n      {newsItems}\n    </ul>\n  )\n}\n","import React from 'react';\n\nexport const ArticleLink = ({ url, text }) => {\n  return (\n    <a\n      href={url}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      {text}\n    </a>\n  )\n}\n","const Entities = require('html-entities').AllHtmlEntities;\n\nconst entities = new Entities();\n\nexport const decodeEntities = (str) => {\n  return entities.decode(str);\n}\n","import React from 'react';\n\nimport { CommentsList } from './CommentsList';\n\nimport { api } from '../../utils/api/api';\n\nimport parse from 'html-react-parser';\nimport { decodeEntities } from '../../utils/decodeEntities';\nimport { secToString } from '../../utils/secToString';\n\nexport const CommentItem = ({ data }) => {\n  const [commentData, setCommentData] = React.useState({});\n  const [commentsListMarkup, setCommentsListMarkup] = React.useState(null);\n  const [isLoadingData, setIsLoadingData] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsLoadingData(true);\n    api.getItemById(data)\n      .then(\n        (data) => {\n          setCommentData(data);\n        },\n        (err) => {\n          console.log(err);\n        }\n      )\n      .finally(() => {\n        setIsLoadingData(false);\n      })\n  }, [data])\n\n  const handleClickLoadNestedComments = () => {\n    const markup = (\n      <CommentsList data={commentData.kids}/>\n    )\n    setCommentsListMarkup(markup)\n  }\n\n  const commentsItem = {\n    paddingTop: 5,\n    paddingBottom: 5\n  };\n\n  return (\n    commentData.deleted ?\n      <li style={commentsItem}>Comment has been deleted</li>\n    :\n      <li style={commentsItem}>\n        {isLoadingData && <p>Loading...</p>}\n        {commentData.kids && (\n          <p>{commentData.kids.length} nested comment('s)</p>\n        )}\n        <address>by: {isLoadingData ? 'Loading...' : commentData.by}</address>\n        <p>Date: <time>{isLoadingData ? 'Loading...' : secToString(commentData.time)}</time></p>\n        <h4>Comment text:</h4>\n        {isLoadingData ? <p>Loading...</p> : parse(decodeEntities(commentData.text))}\n        {commentData.kids ?\n          <button\n            type=\"button\"\n            onClick={handleClickLoadNestedComments}\n            disabled={!commentData.kids}\n          >\n            Load nested comments\n          </button>\n        :\n          null\n        }\n        {commentsListMarkup}\n      </li>\n  )\n}\n","import React from 'react'\n\nimport { CommentItem } from './CommentItem';\n\nexport const CommentsList = ({ data }) => {\n  const commentsList = {\n    paddingTop: 20,\n    paddingBottom: 20\n  };\n  return (\n    <ul\n      style={commentsList}\n    >\n      {data.map(id => (\n        <CommentItem key={id} data={id}/>\n      ))}\n    </ul>\n  )\n}\n","import React from 'react';\n\nexport const UpdateNewsButton = ({ text, isLoading, onClick }) => {\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      disabled={isLoading === 'loading' || isLoading === true}\n    >\n      {isLoading === 'loading' ? 'Loading...' : text}\n    </button>\n  )\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { api } from '../../utils/api/api';\n\nimport { secToString } from '../../utils/secToString';\n\nimport { ArticleParagraph } from './ArticleParagraph';\nimport { ArticleAddress } from './ArticleAddress';\nimport { ArticleLink } from './ArticleLink';\nimport { CommentsList } from './CommentsList';\nimport { UpdateNewsButton } from './UpdateNewsButton';\n\nexport const SingleNewsPage = ({ match }) => {\n  const { newsId } = match.params;\n  const [articleData, setArticleData] = React.useState({});\n  const [isLoadingData, setIsLoadingData] = React.useState(false);\n\n  const fetchData = React.useCallback(() => {\n    setIsLoadingData(true);\n    api.getItemById(newsId)\n      .then(\n        (data) => {\n          setArticleData(data);\n        },\n        (err) => {\n          console.log(err);\n        }\n      )\n      .finally(() => {\n        setIsLoadingData(false);\n      })\n  }, [newsId])\n\n  React.useEffect(() => {\n    fetchData();\n  }, [fetchData])\n\n  const handleUpdateNews = () => {\n    fetchData();\n  }\n\n  return (\n    <section>\n      <UpdateNewsButton\n        text=\"Update news\"\n        isLoading={isLoadingData}\n        onClick={handleUpdateNews}\n      />\n      <article>\n        <header>\n          <h3>\n            {articleData.title}\n          </h3>\n          <ArticleLink\n            url={articleData.url}\n            text=\"Link to news\"\n          />\n        </header>\n        <ArticleParagraph\n          isLoadingData={isLoadingData}\n          text=\"Date: \"\n        >\n          <time>{isLoadingData ? 'Loading...' : secToString(articleData.time)}</time>\n        </ArticleParagraph>\n        <ArticleAddress\n          isLoadingData={isLoadingData}\n          text={`By: ${articleData.by}`}\n        />\n        <ArticleParagraph\n          isLoadingData={isLoadingData}\n          text={articleData.kids && articleData.descendants }\n        >\n          {` comment('s)`}\n        </ArticleParagraph>\n        <Link to=\"/\">Back to news list</Link>\n        {articleData.kids &&\n          <CommentsList data={articleData.kids}/>\n        }\n      </article>\n    </section>\n  )\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nimport { api } from '../../utils/api/api';\n\nexport const fetchNewsIds = createAsyncThunk('news/fetchNewsIds', async () => {\n  const response = await api.getNewStoriesIds();\n  return response;\n})\n\nconst initialState = {\n  newsIds: [],\n  statusNewsIds: 'idle',\n  errorNewsIds: null\n}\n\nconst newsSlice = createSlice({\n  name: 'news',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchNewsIds.pending]: (state, action) => {\n      state.statusNewsIds = 'loading';\n    },\n    [fetchNewsIds.fulfilled]: (state, action) => {\n      state.statusNewsIds = 'succeeded';\n      state.newsIds = action.payload;\n    },\n    [fetchNewsIds.rejected]: (state, action) => {\n      state.statusNewsIds = 'failed';\n      state.errorNewsIds = action.error.message;\n    }\n  }\n})\n\nexport default newsSlice.reducer;\n\nexport const selectNewsIds = state => state.news.newsIds;\nexport const selectNewsIdsError = state => state.news.errorNewsIds;\nexport const selectNewsIdsStatus = state => state.news.statusNewsIds;\n","import React from 'react';\nimport {\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { PageNotFound } from './components/PageNotFound';\nimport { NewsList } from './features/news/NewsList';\nimport { SingleNewsPage } from './features/news/SingleNewsPage';\nimport { UpdateNewsButton } from './features/news/UpdateNewsButton';\n\nimport { UPDATE_TIME } from './utils/constansts/constants';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  fetchNewsIds,\n  selectNewsIds,\n  selectNewsIdsError,\n  selectNewsIdsStatus\n} from './features/news/newsSlice';\n\nfunction App() {\n\n  const dispatch = useDispatch();\n\n  const newsIds = useSelector(selectNewsIds);\n  const newsIdsStatus = useSelector(selectNewsIdsStatus);\n  const newsIdsError = useSelector(selectNewsIdsError);\n\n  React.useEffect(() => {\n    const updateIds = setTimeout(() => {\n      dispatch(fetchNewsIds());\n    }, UPDATE_TIME)\n\n    if (newsIdsStatus === 'idle') {\n      dispatch(fetchNewsIds());\n    }\n\n    return () => {\n      clearTimeout(updateIds);\n    }\n  }, [dispatch, newsIdsStatus])\n\n  function handleClickUpdateButton() {\n    dispatch(fetchNewsIds());\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <main>\n              <section>\n                <UpdateNewsButton\n                  text=\"Update the list\"\n                  isLoading={newsIdsStatus}\n                  onClick={handleClickUpdateButton}\n                />\n                {newsIdsError && <p>newsIdsError</p>}\n                <NewsList data={newsIds}/>\n              </section>\n            </main>\n          )}\n        />\n        <Route exact path=\"/news/:newsId\" component={SingleNewsPage}/>\n        <Route path=\"*\">\n          <PageNotFound />\n        </Route>\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport newsReducer from '../features/news/newsSlice';\n\nexport default configureStore({\n  reducer: {\n    news: newsReducer\n  },\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}